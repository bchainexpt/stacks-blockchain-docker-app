CREATE ROLE ${API_PG_USER} LOGIN PASSWORD '${POSTGRES_PASSWORD}';
--
-- stacks_node_api db setup
--
create database stacks_mainnet;
create database stacks_testnet;
create database stacks_mocknet;
revoke all on database stacks_mainnet from public;
revoke all on database stacks_testnet from public;
revoke all on database stacks_mocknet from public;
grant all privileges on database stacks_mainnet to postgres;
grant all privileges on database stacks_testnet to postgres;
grant all privileges on database stacks_mocknet to postgres;
grant connect, temp on database stacks_mainnet to ${API_PG_USER};
grant connect, temp on database stacks_testnet to ${API_PG_USER};
grant connect, temp on database stacks_mocknet to ${API_PG_USER};

--
-- ${API_PG_SCHEMA} permissions
--
\c stacks_mainnet;
DROP SCHEMA IF EXISTS ${API_PG_SCHEMA} CASCADE;
grant ${API_PG_USER} to postgres;
alter database stacks_mainnet set default_transaction_read_only = off;
alter database stacks_mainnet owner to postgres;
create schema if not exists ${API_PG_SCHEMA} authorization ${API_PG_USER};
alter database stacks_mainnet set search_path TO ${API_PG_SCHEMA},public;
alter user ${API_PG_USER} set search_path TO ${API_PG_SCHEMA},public;
revoke all on schema public from public;
revoke all on schema ${API_PG_SCHEMA} from public;
grant connect, temp on database stacks_mainnet to ${API_PG_USER};
grant all on schema ${API_PG_SCHEMA} to postgres;
grant create, usage on schema ${API_PG_SCHEMA} to ${API_PG_USER};

\c stacks_testnet;
DROP SCHEMA IF EXISTS ${API_PG_SCHEMA} CASCADE;
grant ${API_PG_USER} to postgres;
alter database stacks_testnet set default_transaction_read_only = off;
alter database stacks_testnet owner to postgres;
create schema if not exists ${API_PG_SCHEMA} authorization ${API_PG_USER};
alter database stacks_testnet set search_path TO ${API_PG_SCHEMA},public;
alter user ${API_PG_USER} set search_path TO ${API_PG_SCHEMA},public;
revoke all on schema public from public;
revoke all on schema ${API_PG_SCHEMA} from public;
grant connect, temp on database stacks_testnet to ${API_PG_USER};
grant all on schema ${API_PG_SCHEMA} to postgres;
grant create, usage on schema ${API_PG_SCHEMA} to ${API_PG_USER};

\c stacks_mocknet;
DROP SCHEMA IF EXISTS ${API_PG_SCHEMA} CASCADE;
grant ${API_PG_USER} to postgres;
alter database stacks_mocknet set default_transaction_read_only = off;
alter database stacks_mocknet owner to postgres;
create schema if not exists ${API_PG_SCHEMA} authorization ${API_PG_USER};
alter database stacks_mocknet set search_path TO ${API_PG_SCHEMA},public;
alter user ${API_PG_USER} set search_path TO ${API_PG_SCHEMA},public;
revoke all on schema public from public;
revoke all on schema ${API_PG_SCHEMA} from public;
grant connect, temp on database stacks_mocknet to ${API_PG_USER};
grant all on schema ${API_PG_SCHEMA} to postgres;
grant create, usage on schema ${API_PG_SCHEMA} to ${API_PG_USER};

